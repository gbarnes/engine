/// PBR SHADING FUNCTIONS

// this function approximates the relative surface area of the microfacets
// N is the normal of the surface to measure, H the half vector between view and light 
// a is the roughness component telling how reflective the surface will be.
// this is based on the Trowbridge-Reitz GGX used by Epic in UE4
float TrowbdrigeDistributionGGX(float3 N, float3 H, float roughness)
{
	float a      = roughness*roughness;
    float a2     = a*a;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float num   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
	
    return num / denom;
}

//
float SchlickGGX(float NdotV, float roughness)
{
	float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return num / denom;
}

float GeometrySmith(float3 N, float3 V, float3 L, float k)
{
	float NdotV = max(dot(N, V), 0.0);
	float NdotL = max(dot(N, L), 0.0);
	float GGX1 = SchlickGGX(NdotV, k);
	float GGX2 = SchlickGGX(NdotL, k);
	
	return GGX1 * GGX2;
}

float3 FresnelSchlick(float NdotV, float3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - NdotV, 5.0);
}

float3 CalculateIrradiance(float3 Radiance, float3 L, float3 V, float3 N, float3 H, float3 F0, float Roughness, float Metallic, float3 Albedo)
{
	float NDG = TrowbdrigeDistributionGGX(N, H, Roughness);
	float G = GeometrySmith(N, V, L, Roughness); 
	float3 Fresnel = FresnelSchlick(max(dot(H, V), 0.0), F0);
	
	float3 numerator = NDG * G * Fresnel;
	float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0);
	float3 specular = numerator / max(denominator, 0.001);
	
	float3 kS = Fresnel;
	float3 kD = float3(1.0,1.0,1.0) - kS;
	kD *= 1.0 - Metallic;
	float NdotL = max(dot(N, L), 0.0);    
	
	return (kD * Albedo / PI + specular) * Radiance * NdotL;
}
