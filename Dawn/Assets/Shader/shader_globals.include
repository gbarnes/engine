struct Material {
    vec4 albedo;
    vec4 emission;
    float metallic;
    float roughness;
	float ao;	
}; 

struct Light {
    vec3 position; 
    vec3 color;
	float intensity;
	
	float linear;
    float quadratic;
};


struct DirectionalLight {
    vec3 direction; 
    vec3 color;
	float intensity;
};

const int NR_LIGHTS = 32;

const float PI = 3.14159265359;

vec3 TransformNormalToColorSpace(vec3 Normal)
{
	vec3 NewNormal = normalize(Normal) * 0.5 + 0.5;
	return NewNormal;
}

float CalculateAttenuation(vec3 WorldPos, vec3 LightPosition)
{
	float distance  = length(LightPosition - WorldPos);
    float attenuation = 1.0 / (distance * distance);
	return attenuation;
}


vec3 CalculateLighting(Light light, vec3 ViewDir, vec3 FragPos, vec3 Normal, vec3 Albedo, float SpecularVal)
{
	vec3 lightDir = normalize(light.position - FragPos);
	vec3 diffuse = max(dot(Normal, lightDir), 0.0) * Albedo * light.color.rgb;
	
	// specular
	vec3 halfwayDir = normalize(lightDir + ViewDir);  
	float spec = pow(max(dot(Normal, halfwayDir), 0.0), 16.0);
	vec3 specular = light.color.rgb * spec * SpecularVal;
	
	// attenuation
	float attenuation = CalculateAttenuation(FragPos, light.position); 
	//diffuse *= attenuation;
	//specular *= attenuation;
	
	return diffuse;// + specular;
}

/// PBR SHADING FUNCTIONS

// this function approximates the relative surface area of the microfacets
// N is the normal of the surface to measure, H the half vector between view and light 
// a is the roughness component telling how reflective the surface will be.
// this is based on the Trowbridge-Reitz GGX used by Epic in UE4
float TrowbdrigeDistributionGGX(vec3 N, vec3 H, float roughness)
{
	float a      = roughness*roughness;
    float a2     = a*a;
    float NdotH  = max(dot(N, H), 0.0);
    float NdotH2 = NdotH*NdotH;
	
    float num   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
	
    return num / denom;
}

float SchlickGGX(float NdotV, float roughness)
{
	float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float num   = NdotV;
    float denom = NdotV * (1.0 - k) + k;
	
    return num / denom;
}

float GeometrySmith(vec3 N, vec3 V, vec3 L, float k)
{
	float NdotV = max(dot(N, V), 0.0);
	float NdotL = max(dot(N, L), 0.0);
	float GGX1 = SchlickGGX(NdotV, k);
	float GGX2 = SchlickGGX(NdotL, k);
	
	return GGX1 * GGX2;
}

vec3 FresnelSchlick(float NdotV, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - NdotV, 5.0);
}
