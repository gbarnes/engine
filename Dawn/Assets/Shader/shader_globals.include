struct Material {
    vec4 albedo;
    vec4 emissive;
    float metallic;
    float roughness;
	float ao;	
}; 

struct PointLight {
    vec3 position; 
    vec3 color;
	float intensity;
	float range;
};

struct DirectionalLight {
    vec3 direction; 
    vec3 color;
	vec4 shadowColor;
	float intensity;
	mat4 lightSpace;
};

const int NR_POINT_LIGHTS = 32;
const int NR_DIR_LIGHTS = 1;
const float PI = 3.14159265359;

const float zNear = 0.1;
const float zFar = 10000.0;


vec3 TransformNormalToColorSpace(vec3 Normal)
{
	vec3 NewNormal = normalize(Normal) * 0.5 + 0.5;
	return NewNormal;
}

float CalculateAttenuation(vec3 WorldPos, vec3 LightPosition)
{
	float distance  = length(LightPosition - WorldPos);
    float attenuation = 1.0 / (distance * distance);
	return attenuation;
}

vec3 ApplyFog( in vec3  rgb,      // original color of the pixel
               in float distance, // camera to point distance
                in vec3  rayDir,   // camera position
               in vec3  sunDir,
			   in float density, 
			   in vec3 colorA,
			   in vec3 colorB)  // camera to point vector
{
   float fogAmount = 1.0 - exp( -distance*density );
    float sunAmount = max( dot( rayDir, sunDir ), 0.0 );
    vec3  fogColor  = mix( colorA, // bluish
                           colorB, // yellowish
                           pow(sunAmount,8.0) );
    return mix( rgb, fogColor, fogAmount );
}